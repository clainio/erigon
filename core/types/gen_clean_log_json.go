// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/ledgerwatch/erigon-lib/common"
	"github.com/ledgerwatch/erigon-lib/common/hexutil"
	"github.com/ledgerwatch/erigon-lib/common/hexutility"
)

var _ = (*cleanLogMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (c CleanLog) MarshalJSON() ([]byte, error) {
	type CleanLog struct {
		Address common.Address   `json:"address" gencodec:"required" codec:"1"`
		Topics  []common.Hash    `json:"topics" gencodec:"required" codec:"2"`
		Data    hexutility.Bytes `json:"data" gencodec:"required" codec:"3"`
		Index   hexutil.Uint     `json:"logIndex" codec:"-"`
		Removed bool             `json:"removed" codec:"-"`
	}
	var enc CleanLog
	enc.Address = c.Address
	enc.Topics = c.Topics
	enc.Data = c.Data
	enc.Index = hexutil.Uint(c.Index)
	enc.Removed = c.Removed
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (c *CleanLog) UnmarshalJSON(input []byte) error {
	type CleanLog struct {
		Address *common.Address   `json:"address" gencodec:"required" codec:"1"`
		Topics  []common.Hash     `json:"topics" gencodec:"required" codec:"2"`
		Data    *hexutility.Bytes `json:"data" gencodec:"required" codec:"3"`
		Index   *hexutil.Uint     `json:"logIndex" codec:"-"`
		Removed *bool             `json:"removed" codec:"-"`
	}
	var dec CleanLog
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Address == nil {
		return errors.New("missing required field 'address' for CleanLog")
	}
	c.Address = *dec.Address
	if dec.Topics == nil {
		return errors.New("missing required field 'topics' for CleanLog")
	}
	c.Topics = dec.Topics
	if dec.Data == nil {
		return errors.New("missing required field 'data' for CleanLog")
	}
	c.Data = *dec.Data
	if dec.Index != nil {
		c.Index = uint(*dec.Index)
	}
	if dec.Removed != nil {
		c.Removed = *dec.Removed
	}
	return nil
}
